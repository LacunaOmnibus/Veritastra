
Features to take from Lacuna
============================

    * The API is open to allow people to create their own client or scripts
    * Alliances are important, but give more benefits to being in one.


    * Resources should be abundent in some places, scarce in others to encourage trade and exploration.

What to change, leave out.

    * Spies. Not sure if there is room for spies, although this is a big plus for TLE, not seen elsewhere.
    * There are too many ores, too many food types. Have no more than 10 ores, 4 food types.


Features to take from Facebook Attack on Vega
=============================================

    * The ability to interact in real time with an AI player (Vega)
    * The ability to attack other players bases in real time
    * Battles can be viewed by anyone as a spectator
    * Ships are put into fleets
    * Ships can be fitted out with special equipment to change their rating
    * Different ships have different abilities
    * It's nice that cooldown periods can be free subsidy at the start

What to change.

    * The game is wholey? space based. Bases are space stations
    * There are only four basic resources, more difficult to make them scarce in locations.


Design Problem.

Consider where you have a fleet of (say) six ships which are in formation, you can move them to
location by clicking with your mouse, they will turn, and move to that location, based on their
designed speed and turning ability.

For the most responsive interface, the calculations and the movement should be done on the client
side for two main reasons.

  1) If all calculations are done on the server the http request/response delay will make the ship movement sluggish.
  2) It will put more drain on the server to do these calculations.

In most cases this would be fine, the server determines the ship characteristics and the client
interpretes those to give smooth control and response.

When we do a battle with an AI then this again could be modelled on the client, the server determines
the attributes for the AI fleet, the client then emulates the AI actions and sends the location,
speed and direction back to the server.

The final result of the battle can then be sent to the server to update it's stats.

There are several problems with this.

  1) How do we handle two 'real time' players, each with their own client? The position of one fleet
     has to be sent to the other player?
  2) What is there to stop a cheat from sending spurious ship location and direction to the server to
     get an unfair advantage (dodge incoming missiles, move faster than is possible)?

We need a protocol, or procedure, which eliminates or reduces the chance of cheating in this way
whilst keeping the server processing and network traffic down to a minimum.

  * All that is sent from the client to the server are the mouse-click events. 'Click on this ship',
  'Send to this position'.

  * The server keeps track of every ship and every missile, calculates collisions and damage.

  * Periodically the server sends a list of instructions to the client giving a list of all objects,
  their location, direction, speed, health, duration.

  * The client takes these instructions and smoothly interpretes them, moving the objects as instructed.

  * In the event that a users mouse-click occurs, this will update the server 'state' and a new set
  of instructions will be sent out to the client.

Consider the example of two opponents, six ships each. We will discuss missiles later.

Each ship has a current location (x,y), a direction, a speed and a health. The client can use this 
information to display the ship on the screen and, as time progresses, update the position based
on the direction and speed. With no further information from the server the client could continue
to update this movement indefinately.

Periodically the client receives new sets of locations from the server and it recalculates the ship
location, direction, speed and continues to do this indefinately.

This ensures that the client continues to model the state of the server over time, periodically
getting updates which adjust the ship locations based on (for example) mouse clicks by the user
or the opponent.

AUTONOMOUS ACTION
=================

Although there are only six ships in a fleet, trying to control them all individually would require
excessive mouse clicks, 'move this ship here', 'target this enemy ship', 'fire weapons' etc. leading
to slow game-play and higher client server communications.

There should be a default which ships continue to do until they are countermanded by the user.

For example, if left to their own devices a fleet would naturally form a formation, move towards
the enemy, fire at the closest enemy etc.

PROOF OF CONCEPT
================

We need to prove the concept that we can carry out the calculations on the server and feed them
to the client fast enough that the client can give the impression of continuous movement without
being affected by server lag.

The proof of concept will consist of the following.

A 'box' within which are a number of billiard balls (totally elastic collision) with no friction.
The balls are set in motion, the server calculates the movement of the balls, their velocity,
direction and collisions and makes this data available to the client.

The client is responsible for taking the information from the server and set the balls in motion,
at the correct time it will change the direction of balls due to the calculated collision time.

There will be a 'buffer' of instructions from the server giving the description of the ball 
movements for (say) the next five seconds. When there are only two seconds remaining of calculated
actions, the client will request the following five seconds of data. Thus the client should always
have the future movements of all the balls determined.

The server will calculate the movements of the balls from the last time it did the calculation,
the previous calculations will be cached so that they don't have to be calculated twice in the
event of an overlap.

There will be no user actions (e.g. mouse clicks ) which will change the behavour of the balls in 
this test. That can come later.

This proof of concept will allow us to test how continuous the movement of the balls are, and
how many instances of the page can be supported before there is any server lag.

DATA STRUCTURE
==============

For each ball we need to calculate the following.

  * Object reference
  * Start time reference
  * Initial x position
  * Initial y position
  * Direction of movement
  * Speed of movement
  * End time reference
  * Final x position
  * Final y position

The start and end time references should be the epoch time, accurate to about 100th of a second.

This information should allow the ball to be moved by the client game engine from the initial
position to the final position.

There will be a set of data for each discrete movement of each object (identified by the Object Reference).

Where an object changes direction (for example by a collision) then there will be another set of
data which gives the new direction and speed with a start time reference equal to the end time reference
of the previous set.

The server will report all the changes, for all balls, for the following five seconds.


  {
    data_set : 987,
    objects : [
        {
            id              : 123,
            start_epoch     : 34,
            start_x         : -50,
            start_y         : 45,
            direction       : 90,
            speed           : 10,
            end_epoch       : 135,
            end_x           : 50,
            end_y           : 45,
        },
        {
            id              : 124,
            ...
        }
    ]
  }

The 'data_set' is a unique value used to identify the set of objects so that we can run several browser
sessions at the same time.

Note: the direction may be un-necessary, we can determine the current position by 'tweening' using the
start and end positions and the current frame. Only use direction if the game engine makes it easy to do so.

Using epoch time for start and end allows us to synchronise between browsers (assuming each browsers clock
is correctly set?). May have to look at this in cases where browser time is not set correctly.

If a browser runs slow, then movement will most probably be jerky with the balls 'jumping' to their current
place.

If the browser runs out of cached objects before a server response is given then everything will 'stop'
and then jump to the current place when the next set of commands comes from the server.

SERVER ALGORITHM
================

Request to server to get a new set of data.

  {
    request         : 'start',
    seed            : 123,
  }

The server will respond with a set of data (see above) with a unique data_set number.

When the client is approaching the last two seconds of it's cache, it will make a new request.

  {
    request         : 'continue',
    start_epoch     : 55.04,
    data_set        : 987,
  }

Typically the client will request a start_epoch equal to the current epoch time of the browser.

When the response is returned from the server the data will replace the existing client cache.

CLIENT ALGORITHM
================

The client runs a clock tick routine up to 60 times a second.

The client first checks the epoch time and compares it with it's value from the previous clock tick. (or zero if this is the first tick)

When the epoch time 






